{"version":3,"file":"workbox-core.prod.js","sources":["../_version.js","../_private/logger.js","../models/messages/messageGenerator.js","../_private/WorkboxError.js","../_private/assert.js","../models/quotaErrorCallbacks.js","../_private/cacheNames.js","../_private/cacheMatchIgnoreParams.js","../_private/canConstructReadableStream.js","../_private/canConstructResponseFromBodyStream.js","../_private/timeout.js","../_private/dontWaitFor.js","../_private/Deferred.js","../_private/executeQuotaErrorCallbacks.js","../_private/getFriendlyURL.js","../_private/resultingClientExists.js","../_private/waitUntil.js","../cacheNames.js","../clientsClaim.js","../copyResponse.js","../registerQuotaErrorCallback.js","../setCacheNameDetails.js","../skipWaiting.js"],"sourcesContent":["\"use strict\";\r\n// @ts-ignore\r\ntry {\r\n    self['workbox:core:6.6.0'] && _();\r\n}\r\ncatch (e) { }\r\n","/*\r\n  Copyright 2019 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nconst logger = (process.env.NODE_ENV === 'production'\r\n    ? null\r\n    : (() => {\r\n        // Don't overwrite this value if it's already set.\r\n        // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923\r\n        if (!('__WB_DISABLE_DEV_LOGS' in globalThis)) {\r\n            self.__WB_DISABLE_DEV_LOGS = false;\r\n        }\r\n        let inGroup = false;\r\n        const methodToColorMap = {\r\n            debug: `#7f8c8d`,\r\n            log: `#2ecc71`,\r\n            warn: `#f39c12`,\r\n            error: `#c0392b`,\r\n            groupCollapsed: `#3498db`,\r\n            groupEnd: null, // No colored prefix on groupEnd\r\n        };\r\n        const print = function (method, args) {\r\n            if (self.__WB_DISABLE_DEV_LOGS) {\r\n                return;\r\n            }\r\n            if (method === 'groupCollapsed') {\r\n                // Safari doesn't print all console.groupCollapsed() arguments:\r\n                // https://bugs.webkit.org/show_bug.cgi?id=182754\r\n                if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\r\n                    console[method](...args);\r\n                    return;\r\n                }\r\n            }\r\n            const styles = [\r\n                `background: ${methodToColorMap[method]}`,\r\n                `border-radius: 0.5em`,\r\n                `color: white`,\r\n                `font-weight: bold`,\r\n                `padding: 2px 0.5em`,\r\n            ];\r\n            // When in a group, the workbox prefix is not displayed.\r\n            const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\r\n            console[method](...logPrefix, ...args);\r\n            if (method === 'groupCollapsed') {\r\n                inGroup = true;\r\n            }\r\n            if (method === 'groupEnd') {\r\n                inGroup = false;\r\n            }\r\n        };\r\n        // eslint-disable-next-line @typescript-eslint/ban-types\r\n        const api = {};\r\n        const loggerMethods = Object.keys(methodToColorMap);\r\n        for (const key of loggerMethods) {\r\n            const method = key;\r\n            api[method] = (...args) => {\r\n                print(method, args);\r\n            };\r\n        }\r\n        return api;\r\n    })());\r\nexport { logger };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { messages } from './messages.js';\r\nimport '../../_version.js';\r\nconst fallback = (code, ...args) => {\r\n    let msg = code;\r\n    if (args.length > 0) {\r\n        msg += ` :: ${JSON.stringify(args)}`;\r\n    }\r\n    return msg;\r\n};\r\nconst generatorFunction = (code, details = {}) => {\r\n    const message = messages[code];\r\n    if (!message) {\r\n        throw new Error(`Unable to find message for code '${code}'.`);\r\n    }\r\n    return message(details);\r\n};\r\nexport const messageGenerator = process.env.NODE_ENV === 'production' ? fallback : generatorFunction;\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\r\nimport '../_version.js';\r\n/**\r\n * Workbox errors should be thrown with this class.\r\n * This allows use to ensure the type easily in tests,\r\n * helps developers identify errors from workbox\r\n * easily and allows use to optimise error\r\n * messages correctly.\r\n *\r\n * @private\r\n */\r\nclass WorkboxError extends Error {\r\n    /**\r\n     *\r\n     * @param {string} errorCode The error code that\r\n     * identifies this particular error.\r\n     * @param {Object=} details Any relevant arguments\r\n     * that will help developers identify issues should\r\n     * be added as a key on the context object.\r\n     */\r\n    constructor(errorCode, details) {\r\n        const message = messageGenerator(errorCode, details);\r\n        super(message);\r\n        this.name = errorCode;\r\n        this.details = details;\r\n    }\r\n}\r\nexport { WorkboxError };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { WorkboxError } from '../_private/WorkboxError.js';\r\nimport '../_version.js';\r\n/*\r\n * This method throws if the supplied value is not an array.\r\n * The destructed values are required to produce a meaningful error for users.\r\n * The destructed and restructured object is so it's clear what is\r\n * needed.\r\n */\r\nconst isArray = (value, details) => {\r\n    if (!Array.isArray(value)) {\r\n        throw new WorkboxError('not-an-array', details);\r\n    }\r\n};\r\nconst hasMethod = (object, expectedMethod, details) => {\r\n    const type = typeof object[expectedMethod];\r\n    if (type !== 'function') {\r\n        details['expectedMethod'] = expectedMethod;\r\n        throw new WorkboxError('missing-a-method', details);\r\n    }\r\n};\r\nconst isType = (object, expectedType, details) => {\r\n    if (typeof object !== expectedType) {\r\n        details['expectedType'] = expectedType;\r\n        throw new WorkboxError('incorrect-type', details);\r\n    }\r\n};\r\nconst isInstance = (object, \r\n// Need the general type to do the check later.\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nexpectedClass, details) => {\r\n    if (!(object instanceof expectedClass)) {\r\n        details['expectedClassName'] = expectedClass.name;\r\n        throw new WorkboxError('incorrect-class', details);\r\n    }\r\n};\r\nconst isOneOf = (value, validValues, details) => {\r\n    if (!validValues.includes(value)) {\r\n        details['validValueDescription'] = `Valid values are ${JSON.stringify(validValues)}.`;\r\n        throw new WorkboxError('invalid-value', details);\r\n    }\r\n};\r\nconst isArrayOfClass = (value, \r\n// Need general type to do check later.\r\nexpectedClass, // eslint-disable-line\r\ndetails) => {\r\n    const error = new WorkboxError('not-array-of-class', details);\r\n    if (!Array.isArray(value)) {\r\n        throw error;\r\n    }\r\n    for (const item of value) {\r\n        if (!(item instanceof expectedClass)) {\r\n            throw error;\r\n        }\r\n    }\r\n};\r\nconst finalAssertExports = process.env.NODE_ENV === 'production'\r\n    ? null\r\n    : {\r\n        hasMethod,\r\n        isArray,\r\n        isInstance,\r\n        isOneOf,\r\n        isType,\r\n        isArrayOfClass,\r\n    };\r\nexport { finalAssertExports as assert };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n// Callbacks to be executed whenever there's a quota error.\r\n// Can't change Function type right now.\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nconst quotaErrorCallbacks = new Set();\r\nexport { quotaErrorCallbacks };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nconst _cacheNameDetails = {\r\n    googleAnalytics: 'googleAnalytics',\r\n    precache: 'precache-v2',\r\n    prefix: 'workbox',\r\n    runtime: 'runtime',\r\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\r\n};\r\nconst _createCacheName = (cacheName) => {\r\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\r\n        .filter((value) => value && value.length > 0)\r\n        .join('-');\r\n};\r\nconst eachCacheNameDetail = (fn) => {\r\n    for (const key of Object.keys(_cacheNameDetails)) {\r\n        fn(key);\r\n    }\r\n};\r\nexport const cacheNames = {\r\n    updateDetails: (details) => {\r\n        eachCacheNameDetail((key) => {\r\n            if (typeof details[key] === 'string') {\r\n                _cacheNameDetails[key] = details[key];\r\n            }\r\n        });\r\n    },\r\n    getGoogleAnalyticsName: (userCacheName) => {\r\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\r\n    },\r\n    getPrecacheName: (userCacheName) => {\r\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\r\n    },\r\n    getPrefix: () => {\r\n        return _cacheNameDetails.prefix;\r\n    },\r\n    getRuntimeName: (userCacheName) => {\r\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\r\n    },\r\n    getSuffix: () => {\r\n        return _cacheNameDetails.suffix;\r\n    },\r\n};\r\n","/*\r\n  Copyright 2020 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nfunction stripParams(fullURL, ignoreParams) {\r\n    const strippedURL = new URL(fullURL);\r\n    for (const param of ignoreParams) {\r\n        strippedURL.searchParams.delete(param);\r\n    }\r\n    return strippedURL.href;\r\n}\r\n/**\r\n * Matches an item in the cache, ignoring specific URL params. This is similar\r\n * to the `ignoreSearch` option, but it allows you to ignore just specific\r\n * params (while continuing to match on the others).\r\n *\r\n * @private\r\n * @param {Cache} cache\r\n * @param {Request} request\r\n * @param {Object} matchOptions\r\n * @param {Array<string>} ignoreParams\r\n * @return {Promise<Response|undefined>}\r\n */\r\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\r\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\r\n    // If the request doesn't include any ignored params, match as normal.\r\n    if (request.url === strippedRequestURL) {\r\n        return cache.match(request, matchOptions);\r\n    }\r\n    // Otherwise, match by comparing keys\r\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\r\n    const cacheKeys = await cache.keys(request, keysOptions);\r\n    for (const cacheKey of cacheKeys) {\r\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\r\n        if (strippedRequestURL === strippedCacheKeyURL) {\r\n            return cache.match(cacheKey, matchOptions);\r\n        }\r\n    }\r\n    return;\r\n}\r\nexport { cacheMatchIgnoreParams };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nlet supportStatus;\r\n/**\r\n * A utility function that determines whether the current browser supports\r\n * constructing a [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/ReadableStream)\r\n * object.\r\n *\r\n * @return {boolean} `true`, if the current browser can successfully\r\n *     construct a `ReadableStream`, `false` otherwise.\r\n *\r\n * @private\r\n */\r\nfunction canConstructReadableStream() {\r\n    if (supportStatus === undefined) {\r\n        // See https://github.com/GoogleChrome/workbox/issues/1473\r\n        try {\r\n            new ReadableStream({ start() { } });\r\n            supportStatus = true;\r\n        }\r\n        catch (error) {\r\n            supportStatus = false;\r\n        }\r\n    }\r\n    return supportStatus;\r\n}\r\nexport { canConstructReadableStream };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nlet supportStatus;\r\n/**\r\n * A utility function that determines whether the current browser supports\r\n * constructing a new `Response` from a `response.body` stream.\r\n *\r\n * @return {boolean} `true`, if the current browser can successfully\r\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\r\n *\r\n * @private\r\n */\r\nfunction canConstructResponseFromBodyStream() {\r\n    if (supportStatus === undefined) {\r\n        const testResponse = new Response('');\r\n        if ('body' in testResponse) {\r\n            try {\r\n                new Response(testResponse.body);\r\n                supportStatus = true;\r\n            }\r\n            catch (error) {\r\n                supportStatus = false;\r\n            }\r\n        }\r\n        supportStatus = false;\r\n    }\r\n    return supportStatus;\r\n}\r\nexport { canConstructResponseFromBodyStream };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * Returns a promise that resolves and the passed number of milliseconds.\r\n * This utility is an async/await-friendly version of `setTimeout`.\r\n *\r\n * @param {number} ms\r\n * @return {Promise}\r\n * @private\r\n */\r\nexport function timeout(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n","/*\r\n  Copyright 2019 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * A helper function that prevents a promise from being flagged as unused.\r\n *\r\n * @private\r\n **/\r\nexport function dontWaitFor(promise) {\r\n    // Effective no-op.\r\n    void promise.then(() => { });\r\n}\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * The Deferred class composes Promises in a way that allows for them to be\r\n * resolved or rejected from outside the constructor. In most cases promises\r\n * should be used directly, but Deferreds can be necessary when the logic to\r\n * resolve a promise must be separate.\r\n *\r\n * @private\r\n */\r\nclass Deferred {\r\n    /**\r\n     * Creates a promise and exposes its resolve and reject functions as methods.\r\n     */\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n}\r\nexport { Deferred };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { logger } from '../_private/logger.js';\r\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\r\nimport '../_version.js';\r\n/**\r\n * Runs all of the callback functions, one at a time sequentially, in the order\r\n * in which they were registered.\r\n *\r\n * @memberof workbox-core\r\n * @private\r\n */\r\nasync function executeQuotaErrorCallbacks() {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\r\n            `callbacks to clean up caches.`);\r\n    }\r\n    for (const callback of quotaErrorCallbacks) {\r\n        await callback();\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.log(callback, 'is complete.');\r\n        }\r\n    }\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        logger.log('Finished running callbacks.');\r\n    }\r\n}\r\nexport { executeQuotaErrorCallbacks };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nconst getFriendlyURL = (url) => {\r\n    const urlObj = new URL(String(url), location.href);\r\n    // See https://github.com/GoogleChrome/workbox/issues/2323\r\n    // We want to include everything, except for the origin if it's same-origin.\r\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\r\n};\r\nexport { getFriendlyURL };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { timeout } from './timeout.js';\r\nimport '../_version.js';\r\nconst MAX_RETRY_TIME = 2000;\r\n/**\r\n * Returns a promise that resolves to a window client matching the passed\r\n * `resultingClientId`. For browsers that don't support `resultingClientId`\r\n * or if waiting for the resulting client to apper takes too long, resolve to\r\n * `undefined`.\r\n *\r\n * @param {string} [resultingClientId]\r\n * @return {Promise<Client|undefined>}\r\n * @private\r\n */\r\nexport async function resultingClientExists(resultingClientId) {\r\n    if (!resultingClientId) {\r\n        return;\r\n    }\r\n    let existingWindows = await self.clients.matchAll({ type: 'window' });\r\n    const existingWindowIds = new Set(existingWindows.map((w) => w.id));\r\n    let resultingWindow;\r\n    const startTime = performance.now();\r\n    // Only wait up to `MAX_RETRY_TIME` to find a matching client.\r\n    while (performance.now() - startTime < MAX_RETRY_TIME) {\r\n        existingWindows = await self.clients.matchAll({ type: 'window' });\r\n        resultingWindow = existingWindows.find((w) => {\r\n            if (resultingClientId) {\r\n                // If we have a `resultingClientId`, we can match on that.\r\n                return w.id === resultingClientId;\r\n            }\r\n            else {\r\n                // Otherwise match on finding a window not in `existingWindowIds`.\r\n                return !existingWindowIds.has(w.id);\r\n            }\r\n        });\r\n        if (resultingWindow) {\r\n            break;\r\n        }\r\n        // Sleep for 100ms and retry.\r\n        await timeout(100);\r\n    }\r\n    return resultingWindow;\r\n}\r\n","/*\r\n  Copyright 2020 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * A utility method that makes it easier to use `event.waitUntil` with\r\n * async functions and return the result.\r\n *\r\n * @param {ExtendableEvent} event\r\n * @param {Function} asyncFn\r\n * @return {Function}\r\n * @private\r\n */\r\nfunction waitUntil(event, asyncFn) {\r\n    const returnPromise = asyncFn();\r\n    event.waitUntil(returnPromise);\r\n    return returnPromise;\r\n}\r\nexport { waitUntil };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { cacheNames as _cacheNames } from './_private/cacheNames.js';\r\nimport './_version.js';\r\n/**\r\n * Get the current cache names and prefix/suffix used by Workbox.\r\n *\r\n * `cacheNames.precache` is used for precached assets,\r\n * `cacheNames.googleAnalytics` is used by `workbox-google-analytics` to\r\n * store `analytics.js`, and `cacheNames.runtime` is used for everything else.\r\n *\r\n * `cacheNames.prefix` can be used to retrieve just the current prefix value.\r\n * `cacheNames.suffix` can be used to retrieve just the current suffix value.\r\n *\r\n * @return {Object} An object with `precache`, `runtime`, `prefix`, and\r\n *     `googleAnalytics` properties.\r\n *\r\n * @memberof workbox-core\r\n */\r\nconst cacheNames = {\r\n    get googleAnalytics() {\r\n        return _cacheNames.getGoogleAnalyticsName();\r\n    },\r\n    get precache() {\r\n        return _cacheNames.getPrecacheName();\r\n    },\r\n    get prefix() {\r\n        return _cacheNames.getPrefix();\r\n    },\r\n    get runtime() {\r\n        return _cacheNames.getRuntimeName();\r\n    },\r\n    get suffix() {\r\n        return _cacheNames.getSuffix();\r\n    },\r\n};\r\nexport { cacheNames };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport './_version.js';\r\n/**\r\n * Claim any currently available clients once the service worker\r\n * becomes active. This is normally used in conjunction with `skipWaiting()`.\r\n *\r\n * @memberof workbox-core\r\n */\r\nfunction clientsClaim() {\r\n    self.addEventListener('activate', () => self.clients.claim());\r\n}\r\nexport { clientsClaim };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\r\nimport { WorkboxError } from './_private/WorkboxError.js';\r\nimport './_version.js';\r\n/**\r\n * Allows developers to copy a response and modify its `headers`, `status`,\r\n * or `statusText` values (the values settable via a\r\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\r\n * object in the constructor).\r\n * To modify these values, pass a function as the second argument. That\r\n * function will be invoked with a single object with the response properties\r\n * `{headers, status, statusText}`. The return value of this function will\r\n * be used as the `ResponseInit` for the new `Response`. To change the values\r\n * either modify the passed parameter(s) and return it, or return a totally\r\n * new object.\r\n *\r\n * This method is intentionally limited to same-origin responses, regardless of\r\n * whether CORS was used or not.\r\n *\r\n * @param {Response} response\r\n * @param {Function} modifier\r\n * @memberof workbox-core\r\n */\r\nasync function copyResponse(response, modifier) {\r\n    let origin = null;\r\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\r\n    if (response.url) {\r\n        const responseURL = new URL(response.url);\r\n        origin = responseURL.origin;\r\n    }\r\n    if (origin !== self.location.origin) {\r\n        throw new WorkboxError('cross-origin-copy-response', { origin });\r\n    }\r\n    const clonedResponse = response.clone();\r\n    // Create a fresh `ResponseInit` object by cloning the headers.\r\n    const responseInit = {\r\n        headers: new Headers(clonedResponse.headers),\r\n        status: clonedResponse.status,\r\n        statusText: clonedResponse.statusText,\r\n    };\r\n    // Apply any user modifications.\r\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\r\n    // Create the new response from the body stream and `ResponseInit`\r\n    // modifications. Note: not all browsers support the Response.body stream,\r\n    // so fall back to reading the entire body into memory as a blob.\r\n    const body = canConstructResponseFromBodyStream()\r\n        ? clonedResponse.body\r\n        : await clonedResponse.blob();\r\n    return new Response(body, modifiedResponseInit);\r\n}\r\nexport { copyResponse };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { logger } from './_private/logger.js';\r\nimport { assert } from './_private/assert.js';\r\nimport { quotaErrorCallbacks } from './models/quotaErrorCallbacks.js';\r\nimport './_version.js';\r\n/**\r\n * Adds a function to the set of quotaErrorCallbacks that will be executed if\r\n * there's a quota error.\r\n *\r\n * @param {Function} callback\r\n * @memberof workbox-core\r\n */\r\n// Can't change Function type\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction registerQuotaErrorCallback(callback) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        assert.isType(callback, 'function', {\r\n            moduleName: 'workbox-core',\r\n            funcName: 'register',\r\n            paramName: 'callback',\r\n        });\r\n    }\r\n    quotaErrorCallbacks.add(callback);\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        logger.log('Registered a callback to respond to quota errors.', callback);\r\n    }\r\n}\r\nexport { registerQuotaErrorCallback };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from './_private/assert.js';\r\nimport { cacheNames } from './_private/cacheNames.js';\r\nimport { WorkboxError } from './_private/WorkboxError.js';\r\nimport './_version.js';\r\n/**\r\n * Modifies the default cache names used by the Workbox packages.\r\n * Cache names are generated as `<prefix>-<Cache Name>-<suffix>`.\r\n *\r\n * @param {Object} details\r\n * @param {Object} [details.prefix] The string to add to the beginning of\r\n *     the precache and runtime cache names.\r\n * @param {Object} [details.suffix] The string to add to the end of\r\n *     the precache and runtime cache names.\r\n * @param {Object} [details.precache] The cache name to use for precache\r\n *     caching.\r\n * @param {Object} [details.runtime] The cache name to use for runtime caching.\r\n * @param {Object} [details.googleAnalytics] The cache name to use for\r\n *     `workbox-google-analytics` caching.\r\n *\r\n * @memberof workbox-core\r\n */\r\nfunction setCacheNameDetails(details) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        Object.keys(details).forEach((key) => {\r\n            assert.isType(details[key], 'string', {\r\n                moduleName: 'workbox-core',\r\n                funcName: 'setCacheNameDetails',\r\n                paramName: `details.${key}`,\r\n            });\r\n        });\r\n        if ('precache' in details && details['precache'].length === 0) {\r\n            throw new WorkboxError('invalid-cache-name', {\r\n                cacheNameId: 'precache',\r\n                value: details['precache'],\r\n            });\r\n        }\r\n        if ('runtime' in details && details['runtime'].length === 0) {\r\n            throw new WorkboxError('invalid-cache-name', {\r\n                cacheNameId: 'runtime',\r\n                value: details['runtime'],\r\n            });\r\n        }\r\n        if ('googleAnalytics' in details &&\r\n            details['googleAnalytics'].length === 0) {\r\n            throw new WorkboxError('invalid-cache-name', {\r\n                cacheNameId: 'googleAnalytics',\r\n                value: details['googleAnalytics'],\r\n            });\r\n        }\r\n    }\r\n    cacheNames.updateDetails(details);\r\n}\r\nexport { setCacheNameDetails };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { logger } from './_private/logger.js';\r\nimport './_version.js';\r\n/**\r\n * This method is deprecated, and will be removed in Workbox v7.\r\n *\r\n * Calling self.skipWaiting() is equivalent, and should be used instead.\r\n *\r\n * @memberof workbox-core\r\n */\r\nfunction skipWaiting() {\r\n    // Just call self.skipWaiting() directly.\r\n    // See https://github.com/GoogleChrome/workbox/issues/2525\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        logger.warn(`skipWaiting() from workbox-core is no longer recommended ` +\r\n            `and will be removed in Workbox v7. Using self.skipWaiting() instead ` +\r\n            `is equivalent.`);\r\n    }\r\n    void self.skipWaiting();\r\n}\r\nexport { skipWaiting };\r\n"],"names":["self","_","e","messageGenerator","code","args","msg","length","JSON","stringify","WorkboxError","Error","constructor","errorCode","details","name","quotaErrorCallbacks","Set","_cacheNameDetails","googleAnalytics","precache","prefix","runtime","suffix","registration","scope","_createCacheName","cacheName","filter","value","join","cacheNames","updateDetails","fn","key","Object","keys","eachCacheNameDetail","getGoogleAnalyticsName","userCacheName","getPrecacheName","getPrefix","getRuntimeName","getSuffix","stripParams","fullURL","ignoreParams","strippedURL","URL","param","searchParams","delete","href","supportStatus","canConstructResponseFromBodyStream","undefined","testResponse","Response","body","error","timeout","ms","Promise","resolve","setTimeout","async","cache","request","matchOptions","strippedRequestURL","url","match","keysOptions","assign","ignoreSearch","cacheKeys","cacheKey","ReadableStream","start","promise","then","reject","callback","String","location","replace","RegExp","origin","resultingClientId","existingWindows","clients","matchAll","type","existingWindowIds","map","w","id","resultingWindow","startTime","performance","now","find","has","event","asyncFn","returnPromise","waitUntil","_cacheNames","addEventListener","claim","response","modifier","clonedResponse","clone","responseInit","headers","Headers","status","statusText","modifiedResponseInit","blob","add","skipWaiting"],"mappings":"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"}