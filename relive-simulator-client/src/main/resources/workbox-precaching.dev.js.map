{"version":3,"file":"workbox-precaching.dev.js","sources":["../_version.js","../utils/createCacheKey.js","../utils/PrecacheInstallReportPlugin.js","../utils/PrecacheCacheKeyPlugin.js","../utils/printCleanupDetails.js","../utils/printInstallDetails.js","../PrecacheStrategy.js","../PrecacheController.js","../utils/getOrCreatePrecacheController.js","../addPlugins.js","../utils/removeIgnoredSearchParams.js","../utils/generateURLVariations.js","../PrecacheRoute.js","../addRoute.js","../utils/deleteOutdatedCaches.js","../cleanupOutdatedCaches.js","../createHandlerBoundToURL.js","../getCacheKeyForURL.js","../matchPrecache.js","../precache.js","../precacheAndRoute.js","../PrecacheFallbackPlugin.js"],"sourcesContent":["\"use strict\";\r\n// @ts-ignore\r\ntry {\r\n    self['workbox:precaching:6.6.0'] && _();\r\n}\r\ncatch (e) { }\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport '../_version.js';\r\n// Name of the search parameter used to store revision info.\r\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\r\n/**\r\n * Converts a manifest entry into a versioned URL suitable for precaching.\r\n *\r\n * @param {Object|string} entry\r\n * @return {string} A URL with versioning info.\r\n *\r\n * @private\r\n * @memberof workbox-precaching\r\n */\r\nexport function createCacheKey(entry) {\r\n    if (!entry) {\r\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\r\n    }\r\n    // If a precache manifest entry is a string, it's assumed to be a versioned\r\n    // URL, like '/app.abcd1234.js'. Return as-is.\r\n    if (typeof entry === 'string') {\r\n        const urlObject = new URL(entry, location.href);\r\n        return {\r\n            cacheKey: urlObject.href,\r\n            url: urlObject.href,\r\n        };\r\n    }\r\n    const { revision, url } = entry;\r\n    if (!url) {\r\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\r\n    }\r\n    // If there's just a URL and no revision, then it's also assumed to be a\r\n    // versioned URL.\r\n    if (!revision) {\r\n        const urlObject = new URL(url, location.href);\r\n        return {\r\n            cacheKey: urlObject.href,\r\n            url: urlObject.href,\r\n        };\r\n    }\r\n    // Otherwise, construct a properly versioned URL using the custom Workbox\r\n    // search parameter along with the revision info.\r\n    const cacheKeyURL = new URL(url, location.href);\r\n    const originalURL = new URL(url, location.href);\r\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\r\n    return {\r\n        cacheKey: cacheKeyURL.href,\r\n        url: originalURL.href,\r\n    };\r\n}\r\n","/*\r\n  Copyright 2020 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * A plugin, designed to be used with PrecacheController, to determine the\r\n * of assets that were updated (or not updated) during the install event.\r\n *\r\n * @private\r\n */\r\nclass PrecacheInstallReportPlugin {\r\n    constructor() {\r\n        this.updatedURLs = [];\r\n        this.notUpdatedURLs = [];\r\n        this.handlerWillStart = async ({ request, state, }) => {\r\n            // TODO: `state` should never be undefined...\r\n            if (state) {\r\n                state.originalRequest = request;\r\n            }\r\n        };\r\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\r\n            if (event.type === 'install') {\r\n                if (state &&\r\n                    state.originalRequest &&\r\n                    state.originalRequest instanceof Request) {\r\n                    // TODO: `state` should never be undefined...\r\n                    const url = state.originalRequest.url;\r\n                    if (cachedResponse) {\r\n                        this.notUpdatedURLs.push(url);\r\n                    }\r\n                    else {\r\n                        this.updatedURLs.push(url);\r\n                    }\r\n                }\r\n            }\r\n            return cachedResponse;\r\n        };\r\n    }\r\n}\r\nexport { PrecacheInstallReportPlugin };\r\n","/*\r\n  Copyright 2020 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * A plugin, designed to be used with PrecacheController, to translate URLs into\r\n * the corresponding cache key, based on the current revision info.\r\n *\r\n * @private\r\n */\r\nclass PrecacheCacheKeyPlugin {\r\n    constructor({ precacheController }) {\r\n        this.cacheKeyWillBeUsed = async ({ request, params, }) => {\r\n            // Params is type any, can't change right now.\r\n            /* eslint-disable */\r\n            const cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) ||\r\n                this._precacheController.getCacheKeyForURL(request.url);\r\n            /* eslint-enable */\r\n            return cacheKey\r\n                ? new Request(cacheKey, { headers: request.headers })\r\n                : request;\r\n        };\r\n        this._precacheController = precacheController;\r\n    }\r\n}\r\nexport { PrecacheCacheKeyPlugin };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport '../_version.js';\r\n/**\r\n * @param {string} groupTitle\r\n * @param {Array<string>} deletedURLs\r\n *\r\n * @private\r\n */\r\nconst logGroup = (groupTitle, deletedURLs) => {\r\n    logger.groupCollapsed(groupTitle);\r\n    for (const url of deletedURLs) {\r\n        logger.log(url);\r\n    }\r\n    logger.groupEnd();\r\n};\r\n/**\r\n * @param {Array<string>} deletedURLs\r\n *\r\n * @private\r\n * @memberof workbox-precaching\r\n */\r\nexport function printCleanupDetails(deletedURLs) {\r\n    const deletionCount = deletedURLs.length;\r\n    if (deletionCount > 0) {\r\n        logger.groupCollapsed(`During precaching cleanup, ` +\r\n            `${deletionCount} cached ` +\r\n            `request${deletionCount === 1 ? ' was' : 's were'} deleted.`);\r\n        logGroup('Deleted Cache Requests', deletedURLs);\r\n        logger.groupEnd();\r\n    }\r\n}\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport '../_version.js';\r\n/**\r\n * @param {string} groupTitle\r\n * @param {Array<string>} urls\r\n *\r\n * @private\r\n */\r\nfunction _nestedGroup(groupTitle, urls) {\r\n    if (urls.length === 0) {\r\n        return;\r\n    }\r\n    logger.groupCollapsed(groupTitle);\r\n    for (const url of urls) {\r\n        logger.log(url);\r\n    }\r\n    logger.groupEnd();\r\n}\r\n/**\r\n * @param {Array<string>} urlsToPrecache\r\n * @param {Array<string>} urlsAlreadyPrecached\r\n *\r\n * @private\r\n * @memberof workbox-precaching\r\n */\r\nexport function printInstallDetails(urlsToPrecache, urlsAlreadyPrecached) {\r\n    const precachedCount = urlsToPrecache.length;\r\n    const alreadyPrecachedCount = urlsAlreadyPrecached.length;\r\n    if (precachedCount || alreadyPrecachedCount) {\r\n        let message = `Precaching ${precachedCount} file${precachedCount === 1 ? '' : 's'}.`;\r\n        if (alreadyPrecachedCount > 0) {\r\n            message +=\r\n                ` ${alreadyPrecachedCount} ` +\r\n                    `file${alreadyPrecachedCount === 1 ? ' is' : 's are'} already cached.`;\r\n        }\r\n        logger.groupCollapsed(message);\r\n        _nestedGroup(`View newly precached URLs.`, urlsToPrecache);\r\n        _nestedGroup(`View previously precached URLs.`, urlsAlreadyPrecached);\r\n        logger.groupEnd();\r\n    }\r\n}\r\n","/*\r\n  Copyright 2020 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { copyResponse } from 'workbox-core/copyResponse.js';\r\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\r\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { Strategy } from 'workbox-strategies/Strategy.js';\r\nimport './_version.js';\r\n/**\r\n * A {@link workbox-strategies.Strategy} implementation\r\n * specifically designed to work with\r\n * {@link workbox-precaching.PrecacheController}\r\n * to both cache and fetch precached assets.\r\n *\r\n * Note: an instance of this class is created automatically when creating a\r\n * `PrecacheController`; it's generally not necessary to create this yourself.\r\n *\r\n * @extends workbox-strategies.Strategy\r\n * @memberof workbox-precaching\r\n */\r\nclass PrecacheStrategy extends Strategy {\r\n    /**\r\n     *\r\n     * @param {Object} [options]\r\n     * @param {string} [options.cacheName] Cache name to store and retrieve\r\n     * requests. Defaults to the cache names provided by\r\n     * {@link workbox-core.cacheNames}.\r\n     * @param {Array<Object>} [options.plugins] {@link https://developers.google.com/web/tools/workbox/guides/using-plugins|Plugins}\r\n     * to use in conjunction with this caching strategy.\r\n     * @param {Object} [options.fetchOptions] Values passed along to the\r\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\r\n     * of all fetch() requests made by this strategy.\r\n     * @param {Object} [options.matchOptions] The\r\n     * {@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions|CacheQueryOptions}\r\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\r\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\r\n     * get the response from the network if there's a precache miss.\r\n     */\r\n    constructor(options = {}) {\r\n        options.cacheName = cacheNames.getPrecacheName(options.cacheName);\r\n        super(options);\r\n        this._fallbackToNetwork =\r\n            options.fallbackToNetwork === false ? false : true;\r\n        // Redirected responses cannot be used to satisfy a navigation request, so\r\n        // any redirected response must be \"copied\" rather than cloned, so the new\r\n        // response doesn't contain the `redirected` flag. See:\r\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\r\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {Request|string} request A request to run this strategy for.\r\n     * @param {workbox-strategies.StrategyHandler} handler The event that\r\n     *     triggered the request.\r\n     * @return {Promise<Response>}\r\n     */\r\n    async _handle(request, handler) {\r\n        const response = await handler.cacheMatch(request);\r\n        if (response) {\r\n            return response;\r\n        }\r\n        // If this is an `install` event for an entry that isn't already cached,\r\n        // then populate the cache.\r\n        if (handler.event && handler.event.type === 'install') {\r\n            return await this._handleInstall(request, handler);\r\n        }\r\n        // Getting here means something went wrong. An entry that should have been\r\n        // precached wasn't found in the cache.\r\n        return await this._handleFetch(request, handler);\r\n    }\r\n    async _handleFetch(request, handler) {\r\n        let response;\r\n        const params = (handler.params || {});\r\n        // Fall back to the network if we're configured to do so.\r\n        if (this._fallbackToNetwork) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.warn(`The precached response for ` +\r\n                    `${getFriendlyURL(request.url)} in ${this.cacheName} was not ` +\r\n                    `found. Falling back to the network.`);\r\n            }\r\n            const integrityInManifest = params.integrity;\r\n            const integrityInRequest = request.integrity;\r\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\r\n            // Do not add integrity if the original request is no-cors\r\n            // See https://github.com/GoogleChrome/workbox/issues/3096\r\n            response = await handler.fetch(new Request(request, {\r\n                integrity: request.mode !== 'no-cors'\r\n                    ? integrityInRequest || integrityInManifest\r\n                    : undefined,\r\n            }));\r\n            // It's only \"safe\" to repair the cache if we're using SRI to guarantee\r\n            // that the response matches the precache manifest's expectations,\r\n            // and there's either a) no integrity property in the incoming request\r\n            // or b) there is an integrity, and it matches the precache manifest.\r\n            // See https://github.com/GoogleChrome/workbox/issues/2858\r\n            // Also if the original request users no-cors we don't use integrity.\r\n            // See https://github.com/GoogleChrome/workbox/issues/3096\r\n            if (integrityInManifest &&\r\n                noIntegrityConflict &&\r\n                request.mode !== 'no-cors') {\r\n                this._useDefaultCacheabilityPluginIfNeeded();\r\n                const wasCached = await handler.cachePut(request, response.clone());\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    if (wasCached) {\r\n                        logger.log(`A response for ${getFriendlyURL(request.url)} ` +\r\n                            `was used to \"repair\" the precache.`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // This shouldn't normally happen, but there are edge cases:\r\n            // https://github.com/GoogleChrome/workbox/issues/1441\r\n            throw new WorkboxError('missing-precache-entry', {\r\n                cacheName: this.cacheName,\r\n                url: request.url,\r\n            });\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            const cacheKey = params.cacheKey || (await handler.getCacheKey(request, 'read'));\r\n            // Workbox is going to handle the route.\r\n            // print the routing details to the console.\r\n            logger.groupCollapsed(`Precaching is responding to: ` + getFriendlyURL(request.url));\r\n            logger.log(`Serving the precached url: ${getFriendlyURL(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\r\n            logger.groupCollapsed(`View request details here.`);\r\n            logger.log(request);\r\n            logger.groupEnd();\r\n            logger.groupCollapsed(`View response details here.`);\r\n            logger.log(response);\r\n            logger.groupEnd();\r\n            logger.groupEnd();\r\n        }\r\n        return response;\r\n    }\r\n    async _handleInstall(request, handler) {\r\n        this._useDefaultCacheabilityPluginIfNeeded();\r\n        const response = await handler.fetch(request);\r\n        // Make sure we defer cachePut() until after we know the response\r\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\r\n        const wasCached = await handler.cachePut(request, response.clone());\r\n        if (!wasCached) {\r\n            // Throwing here will lead to the `install` handler failing, which\r\n            // we want to do if *any* of the responses aren't safe to cache.\r\n            throw new WorkboxError('bad-precaching-response', {\r\n                url: request.url,\r\n                status: response.status,\r\n            });\r\n        }\r\n        return response;\r\n    }\r\n    /**\r\n     * This method is complex, as there a number of things to account for:\r\n     *\r\n     * The `plugins` array can be set at construction, and/or it might be added to\r\n     * to at any time before the strategy is used.\r\n     *\r\n     * At the time the strategy is used (i.e. during an `install` event), there\r\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\r\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\r\n     *\r\n     * - If this method is called and there are no suitable `cacheWillUpdate`\r\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\r\n     *\r\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\r\n     * we don't have to do anything (this might be a previously added\r\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\r\n     *\r\n     * - If this method is called and there is more than one `cacheWillUpdate`,\r\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\r\n     * we need to remove it. (This situation is unlikely, but it could happen if\r\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\r\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\r\n     *\r\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\r\n     *\r\n     * @private\r\n     */\r\n    _useDefaultCacheabilityPluginIfNeeded() {\r\n        let defaultPluginIndex = null;\r\n        let cacheWillUpdatePluginCount = 0;\r\n        for (const [index, plugin] of this.plugins.entries()) {\r\n            // Ignore the copy redirected plugin when determining what to do.\r\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\r\n                continue;\r\n            }\r\n            // Save the default plugin's index, in case it needs to be removed.\r\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\r\n                defaultPluginIndex = index;\r\n            }\r\n            if (plugin.cacheWillUpdate) {\r\n                cacheWillUpdatePluginCount++;\r\n            }\r\n        }\r\n        if (cacheWillUpdatePluginCount === 0) {\r\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\r\n        }\r\n        else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\r\n            // Only remove the default plugin; multiple custom plugins are allowed.\r\n            this.plugins.splice(defaultPluginIndex, 1);\r\n        }\r\n        // Nothing needs to be done if cacheWillUpdatePluginCount is 1\r\n    }\r\n}\r\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\r\n    async cacheWillUpdate({ response }) {\r\n        if (!response || response.status >= 400) {\r\n            return null;\r\n        }\r\n        return response;\r\n    },\r\n};\r\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\r\n    async cacheWillUpdate({ response }) {\r\n        return response.redirected ? await copyResponse(response) : response;\r\n    },\r\n};\r\nexport { PrecacheStrategy };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { waitUntil } from 'workbox-core/_private/waitUntil.js';\r\nimport { createCacheKey } from './utils/createCacheKey.js';\r\nimport { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js';\r\nimport { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js';\r\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\r\nimport { printInstallDetails } from './utils/printInstallDetails.js';\r\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\r\nimport './_version.js';\r\nfunction chunk(array, chunkSize = 1) {\r\n    const chunks = [];\r\n    const tmp = [...array];\r\n    if (chunkSize <= 0) {\r\n        return chunks;\r\n    }\r\n    while (tmp.length)\r\n        chunks.push(tmp.splice(0, chunkSize));\r\n    return chunks;\r\n}\r\n/**\r\n * Performs efficient precaching of assets.\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nclass PrecacheController {\r\n    /**\r\n     * Create a new PrecacheController.\r\n     *\r\n     * @param {PrecacheControllerOptions} [options={}] Optional precache controller configurations\r\n     */\r\n    constructor({ cacheName, plugins = [], fallbackToNetwork = true, concurrentRequests = 64, } = {}) {\r\n        this._urlsToCacheKeys = new Map();\r\n        this._urlsToCacheModes = new Map();\r\n        this._cacheKeysToIntegrities = new Map();\r\n        this._strategy = new PrecacheStrategy({\r\n            cacheName: cacheNames.getPrecacheName(cacheName),\r\n            plugins: [\r\n                ...plugins,\r\n                new PrecacheCacheKeyPlugin({ precacheController: this }),\r\n            ],\r\n            fallbackToNetwork,\r\n        });\r\n        this._concurrentRequests =\r\n            concurrentRequests && concurrentRequests > 0 ? concurrentRequests : 1;\r\n        // Bind the install and activate methods to the instance.\r\n        this.install = this.install.bind(this);\r\n        this.activate = this.activate.bind(this);\r\n    }\r\n    /**\r\n     * @type {workbox-precaching.PrecacheStrategy} The strategy created by this controller and\r\n     * used to cache assets and respond to fetch events.\r\n     */\r\n    get strategy() {\r\n        return this._strategy;\r\n    }\r\n    /**\r\n     * Adds items to the precache list, removing any duplicates and\r\n     * stores the files in the\r\n     * {@link workbox-core.cacheNames|\"precache cache\"} when the service\r\n     * worker installs.\r\n     *\r\n     * This method can be called multiple times.\r\n     *\r\n     * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\r\n     */\r\n    precache(entries) {\r\n        this.addToCacheList(entries);\r\n        if (!this._installAndActiveListenersAdded) {\r\n            self.addEventListener('install', this.install);\r\n            self.addEventListener('activate', this.activate);\r\n            this._installAndActiveListenersAdded = true;\r\n        }\r\n    }\r\n    /**\r\n     * This method will add items to the precache list, removing duplicates\r\n     * and ensuring the information is valid.\r\n     *\r\n     * @param {Array<workbox-precaching.PrecacheController.PrecacheEntry|string>} entries\r\n     *     Array of entries to precache.\r\n     */\r\n    addToCacheList(entries) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isArray(entries, {\r\n                moduleName: 'workbox-precaching',\r\n                className: 'PrecacheController',\r\n                funcName: 'addToCacheList',\r\n                paramName: 'entries',\r\n            });\r\n        }\r\n        const urlsToWarnAbout = [];\r\n        for (const entry of entries) {\r\n            // See https://github.com/GoogleChrome/workbox/issues/2259\r\n            if (typeof entry === 'string') {\r\n                urlsToWarnAbout.push(entry);\r\n            }\r\n            else if (entry && entry.revision === undefined) {\r\n                urlsToWarnAbout.push(entry.url);\r\n            }\r\n            const { cacheKey, url } = createCacheKey(entry);\r\n            const cacheMode = typeof entry !== 'string' && entry.revision ? 'reload' : 'default';\r\n            if (this._urlsToCacheKeys.has(url) &&\r\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\r\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\r\n                    firstEntry: this._urlsToCacheKeys.get(url),\r\n                    secondEntry: cacheKey,\r\n                });\r\n            }\r\n            if (typeof entry !== 'string' && entry.integrity) {\r\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\r\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\r\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\r\n                        url,\r\n                    });\r\n                }\r\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\r\n            }\r\n            this._urlsToCacheKeys.set(url, cacheKey);\r\n            this._urlsToCacheModes.set(url, cacheMode);\r\n            if (urlsToWarnAbout.length > 0) {\r\n                const warningMessage = `Workbox is precaching URLs without revision ` +\r\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\r\n                    `Learn more at https://bit.ly/wb-precache`;\r\n                if (process.env.NODE_ENV === 'production') {\r\n                    // Use console directly to display this warning without bloating\r\n                    // bundle sizes by pulling in all of the logger codebase in prod.\r\n                    console.warn(warningMessage);\r\n                }\r\n                else {\r\n                    logger.warn(warningMessage);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Precaches new and updated assets. Call this method from the service worker\r\n     * install event.\r\n     *\r\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\r\n     * to call it yourself in your event handlers.\r\n     *\r\n     * @param {ExtendableEvent} event\r\n     * @return {Promise<workbox-precaching.InstallResult>}\r\n     */\r\n    install(event) {\r\n        // waitUntil returns Promise<any>\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return waitUntil(event, async () => {\r\n            const installReportPlugin = new PrecacheInstallReportPlugin();\r\n            this.strategy.plugins.push(installReportPlugin);\r\n            const chunkedUrlsToCacheKeys = chunk(Array.from(this._urlsToCacheKeys), this._concurrentRequests);\r\n            for (const urlsToCacheKeysChunk of chunkedUrlsToCacheKeys) {\r\n                const batchedRequests = urlsToCacheKeysChunk.map(async ([url, cacheKey]) => {\r\n                    const integrity = this._cacheKeysToIntegrities.get(cacheKey);\r\n                    const cacheMode = this._urlsToCacheModes.get(url);\r\n                    const request = new Request(url, {\r\n                        integrity,\r\n                        cache: cacheMode,\r\n                        credentials: 'same-origin',\r\n                    });\r\n                    return Promise.all(this.strategy.handleAll({\r\n                        params: { cacheKey },\r\n                        request,\r\n                        event,\r\n                    }));\r\n                });\r\n                await Promise.all(batchedRequests);\r\n            }\r\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                printInstallDetails(updatedURLs, notUpdatedURLs);\r\n            }\r\n            return { updatedURLs, notUpdatedURLs };\r\n        });\r\n    }\r\n    /**\r\n     * Deletes assets that are no longer present in the current precache manifest.\r\n     * Call this method from the service worker activate event.\r\n     *\r\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\r\n     * to call it yourself in your event handlers.\r\n     *\r\n     * @param {ExtendableEvent} event\r\n     * @return {Promise<workbox-precaching.CleanupResult>}\r\n     */\r\n    activate(event) {\r\n        // waitUntil returns Promise<any>\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return waitUntil(event, async () => {\r\n            const cache = await self.caches.open(this.strategy.cacheName);\r\n            const currentlyCachedRequests = await cache.keys();\r\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\r\n            const deletedURLs = [];\r\n            for (const request of currentlyCachedRequests) {\r\n                if (!expectedCacheKeys.has(request.url)) {\r\n                    await cache.delete(request);\r\n                    deletedURLs.push(request.url);\r\n                }\r\n            }\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                printCleanupDetails(deletedURLs);\r\n            }\r\n            return { deletedURLs };\r\n        });\r\n    }\r\n    /**\r\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\r\n     * into account the revision information for the URL.\r\n     *\r\n     * @return {Map<string, string>} A URL to cache key mapping.\r\n     */\r\n    getURLsToCacheKeys() {\r\n        return this._urlsToCacheKeys;\r\n    }\r\n    /**\r\n     * Returns a list of all the URLs that have been precached by the current\r\n     * service worker.\r\n     *\r\n     * @return {Array<string>} The precached URLs.\r\n     */\r\n    getCachedURLs() {\r\n        return [...this._urlsToCacheKeys.keys()];\r\n    }\r\n    /**\r\n     * Returns the cache key used for storing a given URL. If that URL is\r\n     * unversioned, like `/index.html', then the cache key will be the original\r\n     * URL with a search parameter appended to it.\r\n     *\r\n     * @param {string} url A URL whose cache key you want to look up.\r\n     * @return {string} The versioned URL that corresponds to a cache key\r\n     * for the original URL, or undefined if that URL isn't precached.\r\n     */\r\n    getCacheKeyForURL(url) {\r\n        const urlObject = new URL(url, location.href);\r\n        return this._urlsToCacheKeys.get(urlObject.href);\r\n    }\r\n    /**\r\n     * @param {string} url A cache key whose SRI you want to look up.\r\n     * @return {string} The subresource integrity associated with the cache key,\r\n     * or undefined if it's not set.\r\n     */\r\n    getIntegrityForCacheKey(cacheKey) {\r\n        return this._cacheKeysToIntegrities.get(cacheKey);\r\n    }\r\n    /**\r\n     * This acts as a drop-in replacement for\r\n     * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\r\n     * with the following differences:\r\n     *\r\n     * - It knows what the name of the precache is, and only checks in that cache.\r\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\r\n     * and it will automatically look up the correct cache key for the currently\r\n     * active revision of that URL.\r\n     *\r\n     * E.g., `matchPrecache('index.html')` will find the correct precached\r\n     * response for the currently active service worker, even if the actual cache\r\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\r\n     *\r\n     * @param {string|Request} request The key (without revisioning parameters)\r\n     * to look up in the precache.\r\n     * @return {Promise<Response|undefined>}\r\n     */\r\n    async matchPrecache(request) {\r\n        const url = request instanceof Request ? request.url : request;\r\n        const cacheKey = this.getCacheKeyForURL(url);\r\n        if (cacheKey) {\r\n            const cache = await self.caches.open(this.strategy.cacheName);\r\n            return cache.match(cacheKey);\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * Returns a function that looks up `url` in the precache (taking into\r\n     * account revision information), and returns the corresponding `Response`.\r\n     *\r\n     * @param {string} url The precached URL which will be used to lookup the\r\n     * `Response`.\r\n     * @return {workbox-routing~handlerCallback}\r\n     */\r\n    createHandlerBoundToURL(url) {\r\n        const cacheKey = this.getCacheKeyForURL(url);\r\n        if (!cacheKey) {\r\n            throw new WorkboxError('non-precached-url', { url });\r\n        }\r\n        return (options) => {\r\n            options.request = new Request(url);\r\n            options.params = Object.assign({ cacheKey }, options.params);\r\n            return this.strategy.handle(options);\r\n        };\r\n    }\r\n}\r\nexport { PrecacheController };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { PrecacheController, } from '../PrecacheController.js';\r\nimport '../_version.js';\r\nlet precacheController;\r\n/**\r\n * @return {PrecacheController}\r\n * @private\r\n */\r\nexport const getOrCreatePrecacheController = (options) => {\r\n    if (!precacheController) {\r\n        precacheController = new PrecacheController(options);\r\n    }\r\n    return precacheController;\r\n};\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\r\nimport './_version.js';\r\n/**\r\n * Adds plugins to the precaching strategy.\r\n *\r\n * @param {Array<Object>} plugins\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nfunction addPlugins(plugins) {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    precacheController.strategy.plugins.push(...plugins);\r\n}\r\nexport { addPlugins };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * Removes any URL search parameters that should be ignored.\r\n *\r\n * @param {URL} urlObject The original URL.\r\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\r\n * each search parameter name. Matches mean that the search parameter should be\r\n * ignored.\r\n * @return {URL} The URL with any ignored search parameters removed.\r\n *\r\n * @private\r\n * @memberof workbox-precaching\r\n */\r\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\r\n    // Convert the iterable into an array at the start of the loop to make sure\r\n    // deletion doesn't mess up iteration.\r\n    for (const paramName of [...urlObject.searchParams.keys()]) {\r\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\r\n            urlObject.searchParams.delete(paramName);\r\n        }\r\n    }\r\n    return urlObject;\r\n}\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\r\nimport '../_version.js';\r\n/**\r\n * Generator function that yields possible variations on the original URL to\r\n * check, one at a time.\r\n *\r\n * @param {string} url\r\n * @param {Object} options\r\n *\r\n * @private\r\n * @memberof workbox-precaching\r\n */\r\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\r\n    const urlObject = new URL(url, location.href);\r\n    urlObject.hash = '';\r\n    yield urlObject.href;\r\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\r\n    yield urlWithoutIgnoredParams.href;\r\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\r\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\r\n        directoryURL.pathname += directoryIndex;\r\n        yield directoryURL.href;\r\n    }\r\n    if (cleanURLs) {\r\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\r\n        cleanURL.pathname += '.html';\r\n        yield cleanURL.href;\r\n    }\r\n    if (urlManipulation) {\r\n        const additionalURLs = urlManipulation({ url: urlObject });\r\n        for (const urlToAttempt of additionalURLs) {\r\n            yield urlToAttempt.href;\r\n        }\r\n    }\r\n}\r\n","/*\r\n  Copyright 2020 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\r\nimport { Route } from 'workbox-routing/Route.js';\r\nimport { generateURLVariations } from './utils/generateURLVariations.js';\r\nimport './_version.js';\r\n/**\r\n * A subclass of {@link workbox-routing.Route} that takes a\r\n * {@link workbox-precaching.PrecacheController}\r\n * instance and uses it to match incoming requests and handle fetching\r\n * responses from the precache.\r\n *\r\n * @memberof workbox-precaching\r\n * @extends workbox-routing.Route\r\n */\r\nclass PrecacheRoute extends Route {\r\n    /**\r\n     * @param {PrecacheController} precacheController A `PrecacheController`\r\n     * instance used to both match requests and respond to fetch events.\r\n     * @param {Object} [options] Options to control how requests are matched\r\n     * against the list of precached URLs.\r\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\r\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\r\n     * appending the `directoryIndex` value.\r\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\r\n     * array of regex's to remove search params when looking for a cache match.\r\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\r\n     * check the cache for the URL with a `.html` added to the end of the end.\r\n     * @param {workbox-precaching~urlManipulation} [options.urlManipulation]\r\n     * This is a function that should take a URL and return an array of\r\n     * alternative URLs that should be checked for precache matches.\r\n     */\r\n    constructor(precacheController, options) {\r\n        const match = ({ request, }) => {\r\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\r\n            for (const possibleURL of generateURLVariations(request.url, options)) {\r\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\r\n                if (cacheKey) {\r\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\r\n                    return { cacheKey, integrity };\r\n                }\r\n            }\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.debug(`Precaching did not find a match for ` + getFriendlyURL(request.url));\r\n            }\r\n            return;\r\n        };\r\n        super(match, precacheController.strategy);\r\n    }\r\n}\r\nexport { PrecacheRoute };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\r\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\r\nimport { PrecacheRoute } from './PrecacheRoute.js';\r\nimport './_version.js';\r\n/**\r\n * Add a `fetch` listener to the service worker that will\r\n * respond to\r\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\r\n * with precached assets.\r\n *\r\n * Requests for assets that aren't precached, the `FetchEvent` will not be\r\n * responded to, allowing the event to fall through to other `fetch` event\r\n * listeners.\r\n *\r\n * @param {Object} [options] See the {@link workbox-precaching.PrecacheRoute}\r\n * options.\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nfunction addRoute(options) {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    const precacheRoute = new PrecacheRoute(precacheController, options);\r\n    registerRoute(precacheRoute);\r\n}\r\nexport { addRoute };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nconst SUBSTRING_TO_FIND = '-precache-';\r\n/**\r\n * Cleans up incompatible precaches that were created by older versions of\r\n * Workbox, by a service worker registered under the current scope.\r\n *\r\n * This is meant to be called as part of the `activate` event.\r\n *\r\n * This should be safe to use as long as you don't include `substringToFind`\r\n * (defaulting to `-precache-`) in your non-precache cache names.\r\n *\r\n * @param {string} currentPrecacheName The cache name currently in use for\r\n * precaching. This cache won't be deleted.\r\n * @param {string} [substringToFind='-precache-'] Cache names which include this\r\n * substring will be deleted (excluding `currentPrecacheName`).\r\n * @return {Array<string>} A list of all the cache names that were deleted.\r\n *\r\n * @private\r\n * @memberof workbox-precaching\r\n */\r\nconst deleteOutdatedCaches = async (currentPrecacheName, substringToFind = SUBSTRING_TO_FIND) => {\r\n    const cacheNames = await self.caches.keys();\r\n    const cacheNamesToDelete = cacheNames.filter((cacheName) => {\r\n        return (cacheName.includes(substringToFind) &&\r\n            cacheName.includes(self.registration.scope) &&\r\n            cacheName !== currentPrecacheName);\r\n    });\r\n    await Promise.all(cacheNamesToDelete.map((cacheName) => self.caches.delete(cacheName)));\r\n    return cacheNamesToDelete;\r\n};\r\nexport { deleteOutdatedCaches };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { deleteOutdatedCaches } from './utils/deleteOutdatedCaches.js';\r\nimport './_version.js';\r\n/**\r\n * Adds an `activate` event listener which will clean up incompatible\r\n * precaches that were created by older versions of Workbox.\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nfunction cleanupOutdatedCaches() {\r\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\r\n    self.addEventListener('activate', ((event) => {\r\n        const cacheName = cacheNames.getPrecacheName();\r\n        event.waitUntil(deleteOutdatedCaches(cacheName).then((cachesDeleted) => {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                if (cachesDeleted.length > 0) {\r\n                    logger.log(`The following out-of-date precaches were cleaned up ` +\r\n                        `automatically:`, cachesDeleted);\r\n                }\r\n            }\r\n        }));\r\n    }));\r\n}\r\nexport { cleanupOutdatedCaches };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\r\nimport './_version.js';\r\n/**\r\n * Helper function that calls\r\n * {@link PrecacheController#createHandlerBoundToURL} on the default\r\n * {@link PrecacheController} instance.\r\n *\r\n * If you are creating your own {@link PrecacheController}, then call the\r\n * {@link PrecacheController#createHandlerBoundToURL} on that instance,\r\n * instead of using this function.\r\n *\r\n * @param {string} url The precached URL which will be used to lookup the\r\n * `Response`.\r\n * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\r\n * response from the network if there's a precache miss.\r\n * @return {workbox-routing~handlerCallback}\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nfunction createHandlerBoundToURL(url) {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    return precacheController.createHandlerBoundToURL(url);\r\n}\r\nexport { createHandlerBoundToURL };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\r\nimport './_version.js';\r\n/**\r\n * Takes in a URL, and returns the corresponding URL that could be used to\r\n * lookup the entry in the precache.\r\n *\r\n * If a relative URL is provided, the location of the service worker file will\r\n * be used as the base.\r\n *\r\n * For precached entries without revision information, the cache key will be the\r\n * same as the original URL.\r\n *\r\n * For precached entries with revision information, the cache key will be the\r\n * original URL with the addition of a query parameter used for keeping track of\r\n * the revision info.\r\n *\r\n * @param {string} url The URL whose cache key to look up.\r\n * @return {string} The cache key that corresponds to that URL.\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nfunction getCacheKeyForURL(url) {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    return precacheController.getCacheKeyForURL(url);\r\n}\r\nexport { getCacheKeyForURL };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\r\nimport './_version.js';\r\n/**\r\n * Helper function that calls\r\n * {@link PrecacheController#matchPrecache} on the default\r\n * {@link PrecacheController} instance.\r\n *\r\n * If you are creating your own {@link PrecacheController}, then call\r\n * {@link PrecacheController#matchPrecache} on that instance,\r\n * instead of using this function.\r\n *\r\n * @param {string|Request} request The key (without revisioning parameters)\r\n * to look up in the precache.\r\n * @return {Promise<Response|undefined>}\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nfunction matchPrecache(request) {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    return precacheController.matchPrecache(request);\r\n}\r\nexport { matchPrecache };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\r\nimport './_version.js';\r\n/**\r\n * Adds items to the precache list, removing any duplicates and\r\n * stores the files in the\r\n * {@link workbox-core.cacheNames|\"precache cache\"} when the service\r\n * worker installs.\r\n *\r\n * This method can be called multiple times.\r\n *\r\n * Please note: This method **will not** serve any of the cached files for you.\r\n * It only precaches files. To respond to a network request you call\r\n * {@link workbox-precaching.addRoute}.\r\n *\r\n * If you have a single array of files to precache, you can just call\r\n * {@link workbox-precaching.precacheAndRoute}.\r\n *\r\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nfunction precache(entries, options) {\r\n    const precacheController = getOrCreatePrecacheController(options);\r\n    precacheController.precache(entries);\r\n}\r\nexport { precache };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { addRoute } from './addRoute.js';\r\nimport { precache } from './precache.js';\r\nimport './_version.js';\r\n/**\r\n * This method will add entries to the precache list and add a route to\r\n * respond to fetch events.\r\n *\r\n * This is a convenience method that will call\r\n * {@link workbox-precaching.precache} and\r\n * {@link workbox-precaching.addRoute} in a single call.\r\n *\r\n * @param {Array<Object|string>} entries Array of entries to precache.\r\n * @param {Object} [options] See the\r\n * {@link workbox-precaching.PrecacheRoute} options.\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nfunction precacheAndRoute(entries, routeOptions, controllerOptions) {\r\n    precache(entries, controllerOptions);\r\n    addRoute(routeOptions);\r\n}\r\nexport { precacheAndRoute };\r\n","/*\r\n  Copyright 2020 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\r\nimport './_version.js';\r\n/**\r\n * `PrecacheFallbackPlugin` allows you to specify an \"offline fallback\"\r\n * response to be used when a given strategy is unable to generate a response.\r\n *\r\n * It does this by intercepting the `handlerDidError` plugin callback\r\n * and returning a precached response, taking the expected revision parameter\r\n * into account automatically.\r\n *\r\n * Unless you explicitly pass in a `PrecacheController` instance to the\r\n * constructor, the default instance will be used. Generally speaking, most\r\n * developers will end up using the default.\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nclass PrecacheFallbackPlugin {\r\n    /**\r\n     * Constructs a new PrecacheFallbackPlugin with the associated fallbackURL.\r\n     *\r\n     * @param {Object} config\r\n     * @param {string} config.fallbackURL A precached URL to use as the fallback\r\n     *     if the associated strategy can't generate a response.\r\n     * @param {PrecacheController} [config.precacheController] An optional\r\n     *     PrecacheController instance. If not provided, the default\r\n     *     PrecacheController will be used.\r\n     */\r\n    constructor({ fallbackURL, precacheController, }) {\r\n        /**\r\n         * @return {Promise<Response>} The precache response for the fallback URL.\r\n         *\r\n         * @private\r\n         */\r\n        this.handlerDidError = () => this._precacheController.matchPrecache(this._fallbackURL);\r\n        this._fallbackURL = fallbackURL;\r\n        this._precacheController =\r\n            precacheController || getOrCreatePrecacheController();\r\n    }\r\n}\r\nexport { PrecacheFallbackPlugin };\r\n"],"names":["self","_","e","REVISION_SEARCH_PARAM","createCacheKey","entry","WorkboxError","urlObject","URL","location","href","cacheKey","url","revision","cacheKeyURL","originalURL","searchParams","set","PrecacheInstallReportPlugin","constructor","updatedURLs","notUpdatedURLs","handlerWillStart","request","state","originalRequest","cachedResponseWillBeUsed","event","cachedResponse","type","Request","push","PrecacheCacheKeyPlugin","precacheController","cacheKeyWillBeUsed","params","_precacheController","getCacheKeyForURL","headers","logGroup","groupTitle","deletedURLs","logger","groupCollapsed","log","groupEnd","printCleanupDetails","deletionCount","length","_nestedGroup","urls","printInstallDetails","urlsToPrecache","urlsAlreadyPrecached","precachedCount","alreadyPrecachedCount","message","PrecacheStrategy","Strategy","options","cacheName","cacheNames","getPrecacheName","_fallbackToNetwork","fallbackToNetwork","plugins","copyRedirectedCacheableResponsesPlugin","_handle","handler","response","cacheMatch","_handleInstall","_handleFetch","warn","getFriendlyURL","integrityInManifest","integrity","integrityInRequest","noIntegrityConflict","fetch","mode","undefined","_useDefaultCacheabilityPluginIfNeeded","wasCached","cachePut","clone","getCacheKey","status","defaultPluginIndex","cacheWillUpdatePluginCount","index","plugin","entries","defaultPrecacheCacheabilityPlugin","cacheWillUpdate","splice","redirected","copyResponse","chunk","array","chunkSize","chunks","tmp","PrecacheController","concurrentRequests","_urlsToCacheKeys","Map","_urlsToCacheModes","_cacheKeysToIntegrities","_strategy","_concurrentRequests","install","bind","activate","strategy","precache","addToCacheList","_installAndActiveListenersAdded","addEventListener","assert","isArray","moduleName","className","funcName","paramName","urlsToWarnAbout","cacheMode","has","get","firstEntry","secondEntry","warningMessage","join","waitUntil","installReportPlugin","chunkedUrlsToCacheKeys","Array","from","urlsToCacheKeysChunk","batchedRequests","map","cache","credentials","Promise","all","handleAll","caches","open","currentlyCachedRequests","keys","expectedCacheKeys","Set","values","delete","getURLsToCacheKeys","getCachedURLs","getIntegrityForCacheKey","matchPrecache","match","createHandlerBoundToURL","Object","assign","handle","getOrCreatePrecacheController","addPlugins","removeIgnoredSearchParams","ignoreURLParametersMatching","some","regExp","test","generateURLVariations","directoryIndex","cleanURLs","urlManipulation","hash","urlWithoutIgnoredParams","pathname","endsWith","directoryURL","cleanURL","additionalURLs","urlToAttempt","PrecacheRoute","Route","urlsToCacheKeys","possibleURL","debug","addRoute","precacheRoute","registerRoute","SUBSTRING_TO_FIND","deleteOutdatedCaches","currentPrecacheName","substringToFind","cacheNamesToDelete","filter","includes","registration","scope","cleanupOutdatedCaches","then","cachesDeleted","precacheAndRoute","routeOptions","controllerOptions","PrecacheFallbackPlugin","fallbackURL","handlerDidError","_fallbackURL"],"mappings":"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"}